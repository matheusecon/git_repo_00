library(dynlm)
library(sem)
library(lmtest)
library(astsa)
library(fpp)
library(Ecdat)
head(pbr) #mostra as primeiras linhas
chartSeries(pbr, subset="last 3 months")
plot(as.ts(pbr_ret))
rm(list= ls()) ## remove todos os objetos
library(zoo)
library(XLConnect)
library(lubridate)
library(ggplot2)
library(stats)
library(forecast)
library(xts)
library(dplyr)
library(quantmod)
library(MASS)
library(wikipediatrend)
library(openxlsx)
library(AER)
library(dynlm)
library(sem)
library(lmtest)
library(astsa)
library(fpp)
library(Ecdat)
pbr <- read.csv("Petr4.csv")
pbr[,1] <- as.Date(pbr[,1])
pbr <- xts(pbr[, -1], order.by=as.POSIXct(pbr$Date))# transforma a primeira coluna em data
pbr <- xts(pbr) #para transformar a base do tipo data frame em xts
View(pbr)
View(pbr)
View(pbr)
View(pbr)
View(pbr)
View(pbr)
head(pbr) #mostra as primeiras linhas
rm(list= ls()) ## remove todos os objetos
pbr <- read.csv("Petr4.csv")
View(pbr)
rm(list= ls()) ## remove todos os objetos
pbr <- read.csv("Petr4.csv", sep = ;)
pbr <- read.csv("Petr4.csv", sep = ";")
View(pbr)
pbr[,1] <- as.Date(pbr[,1])
pbr <- xts(pbr[, -1], order.by=as.POSIXct(pbr$Date))# transforma a primeira coluna em data
pbr <- xts(pbr) #para transformar a base do tipo data frame em xts
head(pbr) #mostra as primeiras linhas
tail(pbr) #mostra as últimas linhas
summary(pbr) #mostra a estatística descritiva
str(pbr) #
View(pbr)
plot.xts(pbr$pbr,major.format="%b/%d/%Y",
main="PETR4.SA.",ylab="Log-return Close price.",xlab="Time")
View(pbr)
rm(list= ls()) ## remove todos os objetos
pbr <- read.csv("Petr4.csv")
View(pbr)
pbr[,1] <- as.Date(pbr[,1])
pbr <- xts(pbr[, -1], order.by=as.POSIXct(pbr$Date))# transforma a primeira coluna em data
pbr <- xts(pbr) #para transformar a base do tipo data frame em xts
head(pbr) #mostra as primeiras linhas
tail(pbr) #mostra as últimas linhas
summary(pbr) #mostra a estatística descritiva
str(pbr) #
View(pbr)
plot.xts(pbr$Adj.Close,major.format="%b/%d/%Y",
main="PETR4.SA.",ylab="Close price.",xlab="Time.")
summary(pbr)
sd(pbr_ret)
sd(pbr)
summary(pbr$Adj.Close)
sd(pbr$Adj.Close)
plot(as.ts(pbr))
p_pbr <- pbr$Adj.Close
View(p_pbr)
trend_pbr = ma(p_pbr, order = 4, centre = T)
plot(as.ts(p_pbr))
lines(trend_pbr)
plot(as.ts(trend_pbr))
detrend_pbr = p_pbr - trend_pbr
plot(as.ts(detrend_pbr))
m_pbr = t(matrix(data = detrend_pbr, nrow = 4))
seasonal_pbr = colMeans(m_pbr, na.rm = T)
plot(as.ts(rep(seasonal_pbr,16)))
random_pbr = p_pbr - trend_pbr - seasonal_pbr
plot(as.ts(random_pbr))
ts_pbr = ts(p_pbr, frequency = 4)
decompose_pbr = decompose(ts_pbr, "multiplicative") # pode-se substituir o additive por multiplicative
plot(as.ts(decompose_pbr$seasonal))
plot(as.ts(decompose_pbr$trend))
plot(as.ts(decompose_pbr$random))
plot(decompose_pbr)
tsdisplay(p_pbr)
lp_pbr <- ln(p_pbr)
ln(1)
l_p_pbr <- log(p_pbr)
View(l_p_pbr)
tsdisplay(l_p_pbr) #fornece a fac e a facp
acfy1 <- acf(p_pbr, main = "Phi 0.50", lag = ordemMax)
lagMax <- 10 # Máxima ordem de defasagem das correlações
acfy1 <- acf(p_pbr, main = "Phi 0.50", lag = ordemMax)
Acf(
p_pbr,
lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE,
na.action = na.contiguous,
demean = TRUE,
...
)
Acf(
p_pbr,
lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE,
na.action = na.contiguous,
demean = TRUE,
)
Pacf(
p_pbr,
lag.max = NULL,
plot = TRUE,
na.action = na.contiguous,
demean = TRUE,
...
)
Pacf(
p_pbr,
lag.max = NULL,
plot = TRUE,
na.action = na.contiguous,
demean = TRUE,
)
pbr_ar <- arima(p_pbr , order = c(1, 0, 0))
pbr_ar
pbr_ar <- arima(p_pbr , order = c(8, 0, 0))
pbr_ar
residuals <- residuals(pbr_ar)
pbr_fitted <- p_pbr - residuals
pbr_ar <- arima(p_pbr , order = c(8, 0, 0))
pbr_ar
print(pbr_ar)
print(pbr_ar)
pbr_forecast <- predict(pbr_ar, n.ahead = 20)
pbr_forecast
pbr_forecast_values <- pbr_forecast$pred
pbr_forecast_se <- pbr_forecast$se
plot.xts(pbr$Adj.Close,major.format="%b/%d/%Y",
main="PETR4.SA.",ylab="Log-return Close price.",xlab="Time")
points(pbr_forecast_values , type = "l", col = 2)
plot.ts(pbr_ts, xlim = c(0, 300), ylim = c(40,80))
points(pbr_forecast_values , type = "l", col = 2)
plot.ts(p_pbr, xlim = c(0, 300), ylim = c(40,80))
points(pbr_forecast_values , type = "l", col = 2)
library(tseries)
library(Quandl)
library(readr)
library(zoo)
library(XLConnect)
library(lubridate)
library(ggplot2)
library(stats)
library(forecast)
library(xts)
library(dplyr)
library(quantmod)
library(MASS)
library(wikipediatrend)
library(openxlsx)
library(AER)
library(dynlm)
library(sem)
library(lmtest)
library(astsa)
library(fpp)
library(Ecdat)
library(Metrics)
library(forecast)
rm(list= ls()) ## remove todos os objetos
pbr <- read.csv("C:/Users/Matheus/OneDrive/PDM/scripts/R/Séries/Petr4.csv")
View(pbr)
plot(pbr_ts,xlab="Dia",ylab="Preço de fechamento", main="PETR4 Closing Stock Prices")
View(pbr)
ZOO <- zoo(pbr$Close, order.by=as.Date(as.character(pbr$Date), format='%Y-%m-%d'))
pbr_ts <- ts(ZOO)
is.ts(pbr_ts)
print(pbr_ts)
length(pbr_ts)
head(pbr_ts,n=10)
tail(pbr_ts,n=10)
summary(pbr$close)
sd(pbr$close)
pbr[,1] <- as.Date(pbr[,1])
pbr <- xts(pbr[, -1], order.by=as.POSIXct(pbr$Date))# transforma a primeira coluna em data
pbr <- xts(pbr) #para transformar a base do tipo data frame em xts
chartSeries(pbr, subset="last 3 months")
chart_Series(pbr)
pbr <- read.csv("C:/Users/Matheus/OneDrive/PDM/scripts/R/Séries/Petr4.csv")
ZOO <- zoo(pbr$Close, order.by=as.Date(as.character(pbr$Date), format='%Y-%m-%d'))
pbr_ts <- ts(ZOO)
plot(as.ts(pbr_ts))
p_pbr <- pbr$Close
l_p_pbr <- log(p_pbr)
trend_pbr = ma(p_pbr, order = 4, centre = T)
plot(as.ts(p_pbr))
lines(trend_pbr)
plot(as.ts(trend_pbr))
detrend_pbr = p_pbr - trend_pbr
plot(as.ts(detrend_pbr))
m_pbr = t(matrix(data = detrend_pbr, nrow = 4))
seasonal_pbr = colMeans(m_pbr, na.rm = T)
plot(as.ts(rep(seasonal_pbr,16)))
random_pbr = p_pbr - trend_pbr - seasonal_pbr
plot(as.ts(random_pbr))
ts_pbr = ts(p_pbr, frequency = 4)
decompose_pbr = decompose(ts_pbr, "multiplicative") # pode-se substituir o additive por multiplicative
plot(as.ts(decompose_pbr$seasonal))
plot(as.ts(decompose_pbr$trend))
plot(as.ts(decompose_pbr$random))
plot(decompose_pbr)
pbr_linear<-log(pbr_ts)
plot.ts(pbr_linear, main="Daily Stock Prices (log)", ylab="Price", col=4)
pbr_linear_diff <- diff(pbr_linear)
plot.ts(pbr_linear_diff, main="Daily Stock Prices (log)", ylab="Price", col=4)
plot(pbr_ts[-250],pbr_ts[-1],main="Scatterplot (lag=1)")
abline(lm(pbr_ts[-1] ~ pbr_ts[-250]),col=4)
cor(pbr_ts[-250],pbr_ts[-1])
cor(pbr_ts[-(249:250)],pbr_ts[-(1:2)])
acf(pbr_ts, lag.max=50, plot=FALSE)
acf(pbr_ts, lag.max=50)
pacf(pbr_ts, lag.max=50)
acf(pbr_ts, lag.max=50)
install.packages("rio")
library(rio)
install_formats("rio")
library(rio)
install.packages("readxl")
install.packages("readxl")
libray(readxl)
library(readxl)
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
pbr[,1] <- as.Date(pbr[,1])
View(pbr)
pbr[,1] <- as.Date(pbr[,"Date"])
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
pbr[, "month"] <- format(pbr[,"Date"], "%m")
View(pbr)
View(pbr)
pbr
ggplot(pbr, aes(Date, close)) + geom_line() + scale_x_date("month")
library(ggplot)
install.packages("ggplot")
library(ggplot)
ggplot(pbr, aes(Date, close)) + geom_line() + scale_x_date("month") +
ylab=("Preço de fechamento") +
xlab="Dia"
plot(pbr, aes(Date, close)) + geom_line() + scale_x_date("month") +
ylab=("Preço de fechamento") +
xlab="Dia"
plot(pbr_ts) + geom_line() +
ylab=("Preço de fechamento") +
xlab="Dia"
plot(pbr_ts)
plot(pbr_ts) + xlab="Dia" + ylab="Preço de fechamento"
plot(pbr_ts,xlab="Dia",ylab="Preço de fechamento", main="PETR4 Closing Stock Prices", geom_line())
pbr$Dates <- as.Date(pbr[,"Date"])
View(pbr)
ggplot(pbr, aes(Dates, Close))
ggplot(pbr)
install.packages("ggplot2")
library(ggplot2)
ggplot(pbr)
ggplot(pbr, aes(Dates, close)) + geom_line() + scale_x_date("month") +
ylab("Preço") +
xlab("Dia")
ggplot(pbr, aes(pbr$Dates, pbr$Close)) + geom_line() + scale_x_date("month") +
ylab("Preço") +
xlab("Dia")
ggplot(pbr, aes(Dates, Close)) + geom_line() + scale_x_date("month") +
ylab("Preço") +
xlab("Dia")
View(pbr)
View(pbr)
ggplot(pbr, aes(Dates, Close)) + geom_point(color = "navyblue") +
facet_wrap( ~ month) + ylab("Preço") +
xlab("Dia")
pbr_ts = ts(pbr[,c("Close")])
pbr$Close_clean = tsclean(pbr_ts)
ZOO <- zoo(pbr$Close, order.by=as.Date(as.character(pbr$Date), format='%Y-%m-%d'))
pbr_ts <- ts(ZOO)
rm(list= ls()) ## remove todos os objetos
pbr <- read.csv("C:/Users/Matheus/OneDrive/PDM/scripts/R/Séries/Petr4.csv")
pbr$Dates <- as.Date(pbr[,"Date"])
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
pbr[, "month"] <- format(pbr[,"Date"], "%m")
pbr
ZOO <- zoo(pbr$Close, order.by=as.Date(as.character(pbr$Date), format='%Y-%m-%d'))
library(tseries)
library(Quandl)
library(readr)
library(zoo)
library(XLConnect)
library(lubridate)
library(ggplot2)
library(stats)
library(forecast)
library(xts)
library(dplyr)
library(quantmod)
library(MASS)
library(wikipediatrend)
library(openxlsx)
library(AER)
library(dynlm)
library(sem)
library(lmtest)
library(astsa)
library(fpp)
library(Ecdat)
library(Metrics)
library(forecast)
library(rio)
library(readxl)
library(ggplot)
library(ggplot2)
ZOO <- zoo(pbr$Close, order.by=as.Date(as.character(pbr$Date), format='%Y-%m-%d'))
pbr_ts <- ts(ZOO)
ggplot(pbr, aes(Dates, Close)) + geom_point(color = "navyblue") +
facet_wrap( ~ month) + ylab("Preço") +
xlab("Dia")
View(pbr)
pbr$Dates <- as.Date(pbr[,"Date"])
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
pbr[, "month"] <- format(pbr[,"Date"], "%m")
pbr
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
View(pbr)
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
pbr$Dates <- as.Date(pbr[,"Date"])
pbr[, "year"] <- format(pbr[,"Date"], "%Y")
View(pbr)
pbr[, "year"] <- format(pbr[,"Dates"], "%Y")
pbr[, "month"] <- format(pbr[,"Dates"], "%m")
pbr
ggplot(pbr, aes(Dates, Close)) + geom_point(color = "navyblue") +
facet_wrap( ~ month) + ylab("Preço") +
xlab("Dia")
pbr_tss = ts(pbr[,c("Close")])
pbr$Close_clean = tsclean(pbr_tss)
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close_clean)) +
ylab("Preço limpo") +
xlab("Dia")
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close)) +
ylab("Preço limpo") +
xlab("Dia")
pbr$cnt_ma7 = ma(pbr$Close, order = 7)
pbr$cnt_ma30 = ma(pbr$Close, order = 30)
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close, colour = "Preço")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma7, colour = "Média Móvel 7")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma30, colour = "Média Móvel 30")) +
ylab("Preço limpo") +
xlab("Dia")
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close, Legenda = "Preço")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma7, Legenda = "Média Móvel 7")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma30, Legenda = "Média Móvel 30")) +
ylab("Preço limpo") +
xlab("Dia")
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close, colour = "Preço")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma7, colour = "Média Móvel 7")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma30, colour = "Média Móvel 30")) +
ylab("Preço limpo") +
xlab("Dia")
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close, colour = "Preço")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma7, colour = "Média Móvel 7")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma30, colour = "Média Móvel 30")) +
ylab("Preço") +
xlab("Dia")
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close_clean, colour = "Preço")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma7, colour = "Média Móvel 7")) +
geom_line(data = pbr, aes(x = Dates, y = cnt_ma30, colour = "Média Móvel 30")) +
ylab("Preço") +
xlab("Dia")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
tail(pbr_ts,n=10)
install.packages("tidyverse")
count_ma = ts(na.omit(pbr$cnt_ma7), frequency = 30)
decomp = stl(count_ma, s.window="periódica")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
count_ma
decomp = stl(count_ma, s.window="periódica")
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
library(tseries)
library(Quandl)
library(readr)
library(zoo)
library(XLConnect)
library(lubridate)
library(ggplot2)
library(stats)
library(forecast)
library(xts)
library(dplyr)
library(quantmod)
library(MASS)
library(wikipediatrend)
library(openxlsx)
library(AER)
library(dynlm)
library(sem)
library(lmtest)
library(astsa)
library(fpp)
library(Ecdat)
library(Metrics)
library(forecast)
library(rio)
library(readxl)
library(ggplot2)
library(tidyverse)
count_ma = ts(na.omit(pbr$cnt_ma7), frequency = 30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
count_ma = ts(na.omit(pbr$Close), frequency = 30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
plot(pbr$Close)
lines(seasadj(decompose(pbr$Close,"multiplicative")),col=4)
plot(pbr$Close)
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close_clean)) +
lines(seasadj(decompose(pbr$Close,"multiplicative")),col=4) +
ylab("Preço limpo") +
xlab("Dia")
seasadj(decompose(pbr$Close)
ggplot() + geom_line(data = pbr, aes(x = Dates, y = Close_clean)) +
lines(seasadj(decompose(pbr$Close,"multiplicative")),col=4) +
ylab("Preço limpo") +
xlab("Dia")
plot(pbr_ts)
lines(seasadj(decompose(pbr_ts,"multiplicative")),col=4)
count_ma = ts(na.omit(pbr$cnt_ma7), frequency = 30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
adf.test(count_ma, alternative = "stationary")
acf(count_ma, main='')
acf(count_ma, lag.max=50)
acf(count_ma, main='')
pacf(count_ma, main='')
tsdisplay(count_ma)
count_d1 = diff(deseasonal_cnt, differences = 1)
plot(count_d1)
adf.test(deseasonal_cnt, alternative = "stationary")
adf.test(count_d1, alternative = "stationary")
adf.test(count_d1)
adf.test(count_d1, alternative = "stationary")
tsdisplay(count_d1)
fit <- auto.arima(deseasonal_cnt, seasonal=FALSE)
fit
tsdisplay(residuals(fit), lag.max=45, main = '(1,1,1) Model Residuals')
fit2 = arima(deseasonal_cnt, order=c(1,1,7))
tsdisplay(residuals(fit2), lag.max=45, main = 'Seasonal Model Residuals')
fit2 = arima(deseasonal_cnt, order=c(6,1,7))
tsdisplay(residuals(fit2), lag.max=45, main = 'Seasonal Model Residuals')
fit2 = arima(deseasonal_cnt, order=c(2,1,7))
tsdisplay(residuals(fit2), lag.max=45, main = 'Seasonal Model Residuals')
fit2 = arima(deseasonal_cnt, order=c(2,1,7))
tsdisplay(residuals(fit2), lag.max=45, main = 'Seasonal Model Residuals')
fcast <- forecast(fit2, h=30)
plot(fcast)
hold <- window(ts(deseasonal_cnt), start=200)
fit_no_holdout = arima(ts(deseasonal_cnt[-c(200:244)]), order=c(2,1,7))
fcast_no_holdout <- forecast(fit_no_holdout,h=45)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt), start=200)
fit_no_holdout = arima(ts(deseasonal_cnt[-c(200:244)]), order=c(2,1,7))
fcast_no_holdout <- forecast(fit_no_holdout,h=45)
plot(fcast_no_holdout, main=" ")
hold <- window(ts(deseasonal_cnt), start=200)
fit_no_holdout = arima(ts(deseasonal_cnt[-c(200:244)]), order=c(2,1,7))
fcast_no_holdout <- forecast(fit_no_holdout,h=45)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fit_w_seasonality = auto.arima(deseasonal_cnt, seasonal=TRUE)
seas_fcast <- forecast(fit_w_seasonality,h=50)
plot(seas_fcast)
lines(ts(count_ma))
lines(ts(deseasonal_cnt))
fit_w_seasonality = auto.arima(deseasonal_cnt, seasonal=TRUE)
seas_fcast <- forecast(fit_w_seasonality,h=20)
plot(seas_fcast)
seas_fcast <- forecast(fit_w_seasonality,h=20)
fit_w_seasonality = auto.arima(deseasonal_cnt, seasonal=TRUE)
seas_fcast <- forecast(fit_w_seasonality,h=20)
plot(seas_fcast)
fit_w_seasonality = auto.arima(deseasonal_cnt, seasonal=TRUE)
seas_fcast <- forecast(fit_w_seasonality,h=45)
plot(seas_fcast)
fit_w_seasonality = auto.arima(deseasonal_cnt, seasonal=TRUE)
seas_fcast <- forecast(fit_w_seasonality,h=45)
plot(seas_fcast)
